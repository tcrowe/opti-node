/*

# opti-node

+ build opti-node shell script in ../bin

See ../COPYING for GPL 3.0 license

*/

const fs = require("fs");
const path = require("path");
const async = require("async");
const optiNodeBinPath = path.join(__dirname, "..", "bin", "opti-node.sh");
const { staticArgs } = require(".");

function buildSource() {
  // static opti-node args
  const otherArgs = staticArgs.join(" ");

  const op = `#!/bin/bash

# opti-node bin file generated by ../src/build-bin.js

#
# try to run node with good settings for low resource environments
#

# no color in production
LOG_COLOR_ARG="--no-log-colour"

# assume production if no NODE_ENV
if [ "$NODE_ENV" == "" ]; then
  NODE_ENV=production
fi

# enable color in development
if [ "$NODE_ENV" == "development" ]; then
  LOG_COLOR_ARG="--log-colour"
fi

# the user can choose to limit ram by passing OPTI_NODE_LIMIT_RAM_MB=256
LIMIT_RAM_ARG=""

if [ "$OPTI_NODE_LIMIT_RAM_MB" != "" ]; then
  LIMIT_RAM_ARG="--max_old_space_size=$OPTI_NODE_LIMIT_RAM_MB"
fi

# no args = interactive / REPL
INTERACTIVE=""

# COUNT == 1 means no arguments
COUNT=\`echo "$@" | wc -c\`

if [ COUNT == 1 ]; then
  INTERACTIVE="--interactive"
fi

node ${otherArgs} \\
  $LOG_COLOR_ARG \\
  $LIMIT_RAM_ARG \\
  $INTERACTIVE \\
  $@

`;

  return op;
}

//
// write the shell script to the ../bin path
//

function writeOptiNodeScript(done) {
  const op = buildSource();

  fs.writeFile(optiNodeBinPath, op, err => {
    if (err !== null && err !== undefined) {
      console.error("error writing", optiNodeBinPath, err);
      return done(err);
    }

    done();
  });
}

function chmodOptiNodeScript(done) {
  fs.chmod(optiNodeBinPath, 0o777, err => {
    if (err !== null && err !== undefined) {
      console.error("error chmod", optiNodeBinPath, err);
      return done(err);
    }

    done();
  });
}

const steps = [writeOptiNodeScript, chmodOptiNodeScript];

async.series(steps, err => {
  if (err !== null && err !== undefined) {
    console.error("error doing build series", err);
  }
});
