{"version":3,"sources":["../src/index.js"],"names":["require","spawn","process","env","NODE_ENV","OPTI_NODE_LIMIT_RAM_MB","nodeCmd","staticArgs","buildLogColor","buildOptiNodeLimitRamMb","undefined","dynamicArgs","createProcess","cmd","args","opts","renderedDynamicArgs","map","fn","filter","item","length","procArgs","concat","module","exports"],"mappings":";;eAWkBA,OAAO,CAAC,eAAD,C;IAAjBC,K,YAAAA,K;;mBACoDC,OAAO,CAACC,G;yCAA5DC,Q;IAAAA,Q,sCAAW,Y;IAAcC,sB,gBAAAA,sB;AACjC,IAAMC,OAAO,GAAG,MAAhB;AAEA,IAAMC,UAAU,GAAG,CAKjB,qBALiB,EAYjB,aAZiB,EAkBjB,aAlBiB,EAwBjB,qBAxBiB,EA8BjB,kBA9BiB,EAoCjB,kBApCiB,EA0CjB,cA1CiB,EAgDjB,+BAhDiB,EAwDjB,4CAxDiB,EA8DjB,yBA9DiB,EAoEjB,sCApEiB,EAyEjB,kBAzEiB,EA8EjB,eA9EiB,CAAnB;;AAiFA,SAASC,aAAT,GAAyB;AAKvB,MAAIJ,QAAQ,KAAK,aAAjB,EAAgC;AAC9B,WAAO,cAAP;AACD;;AAED,SAAO,iBAAP;AACD;;AAED,SAASK,uBAAT,GAAmC;AAKjC,MAAIJ,sBAAsB,KAAKK,SAA/B,EAA0C;AACxC,0CAA+BL,sBAA/B;AACD;;AAED,SAAO,EAAP;AACD;;AAED,IAAMM,WAAW,GAAG,CAACH,aAAD,EAAgBC,uBAAhB,CAApB;;AAaA,SAASG,aAAT,OAAgE;AAAA,sBAAvCC,GAAuC;AAAA,MAAvCA,GAAuC,yBAAjCP,OAAiC;AAAA,uBAAxBQ,IAAwB;AAAA,MAAxBA,IAAwB,0BAAjB,EAAiB;AAAA,uBAAbC,IAAa;AAAA,MAAbA,IAAa,0BAAN,EAAM;AAE9D,MAAMC,mBAAmB,GAAGL,WAAW,CACpCM,GADyB,CACrB,UAAAC,EAAE;AAAA,WAAIA,EAAE,EAAN;AAAA,GADmB,EAGzBC,MAHyB,CAGlB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB;AAAA,GAHc,CAA5B;AAIA,MAAMC,QAAQ,GAAG,GACdC,MADc,CACPhB,UADO,EAEdgB,MAFc,CAEPP,mBAFO,EAGdO,MAHc,CAGPT,IAHO,CAAjB;AAIA,SAAOb,KAAK,CAACY,GAAD,EAAMS,QAAN,EAAgBP,IAAhB,CAAZ;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiB;AAAElB,EAAAA,UAAU,EAAVA,UAAF;AAAcI,EAAAA,WAAW,EAAXA,WAAd;AAA2BC,EAAAA,aAAa,EAAbA;AAA3B,CAAjB","sourcesContent":["/*\n\n# opti-node\n\n+ the node api helps build the opti-node arguments for node\n+ the CLI is built by ./build-bin.js\n\nSee ../COPYING for GPL 3.0 license\n\n*/\n\nconst { spawn } = require(\"child_process\");\nconst { NODE_ENV = \"production\", OPTI_NODE_LIMIT_RAM_MB } = process.env;\nconst nodeCmd = \"node\";\n\nconst staticArgs = [\n  /*\n    Enables optimizations which favor memory size over execution speed\n    type: bool  default: false\n    */\n  \"--optimize_for_size\",\n\n  /*\n    expose gc extension\n    globa.gc()\n    type: bool  default: false\n    */\n  \"--expose_gc\",\n\n  /*\n    always perform global GCs\n    type: bool  default: false\n    */\n  \"--gc_global\",\n\n  /*\n    garbage collect after <n> allocations\n    type: int  default: -1\n    */\n  \"--gc_interval=12000\",\n\n  /*\n    Perform compaction on every full GC\n    type: bool  default: false\n    */\n  \"--always_compact\",\n\n  /*\n    use memory reducer\n    type: bool  default: true\n    */\n  \"--memory_reducer\",\n\n  /*\n    abort by crashing\n    type: bool  default: true\n    */\n  \"--hard_abort\",\n\n  /*\n    abort program (dump core) when an uncaught exception is thrown\n    type: bool  default: false\n    */\n  \"--abort_on_uncaught_exception\",\n\n  /*\n    Abort program when the stack overflows or a string exceeds maximum length\n    (as opposed to throwing RangeError). This is useful for fuzzing where the\n    spec behaviour would introduce nondeterminism.)\n    type: bool  default: false\n    */\n  \"--abort_on_stack_or_string_length_overflow\",\n\n  /*\n    Use idle notification to reduce memory footprint.\n    type: bool  default: true\n    */\n  \"--use_idle_notification\",\n\n  /*\n    maximum length of function source code printed in a stack trace.)\n    type: int  default: 300\n    */\n  \"--max_stack_trace_source_length=1000\",\n\n  /*\n  silence deprecation warnings\n  */\n  \"--no-deprecation\",\n\n  /*\n  silence all process warnings\n  */\n  \"--no-warnings\"\n];\n\nfunction buildLogColor() {\n  /*\n  When logging, try to use coloured output.\n  type: bool  default: true\n  */\n  if (NODE_ENV === \"development\") {\n    return \"--log_colour\";\n  }\n\n  return \"--no-log_colour\";\n}\n\nfunction buildOptiNodeLimitRamMb() {\n  /*\n    max size of the old space (in Mbytes)\n    type: int  default: 0\n   */\n  if (OPTI_NODE_LIMIT_RAM_MB !== undefined) {\n    return `--max_old_space_size=${OPTI_NODE_LIMIT_RAM_MB}`;\n  }\n\n  return \"\";\n}\n\nconst dynamicArgs = [buildLogColor, buildOptiNodeLimitRamMb];\n\n/**\n * Use `child_process.spawn` to create a new node process with opti-node args\n *\n * See https://nodejs.org/dist/latest/docs/api/child_process.html#child_process_child_process_spawn_command_args_options\n *\n * @method createProcess\n * @param {string} cmd the command to run, defaults to node\n * @param {array} options.args maybe just your `[\"script.js\"]`\n * @param {object} options.opts\n * @returns {object} node child process\n */\nfunction createProcess({ cmd = nodeCmd, args = [], opts = {} }) {\n  // render the dynamic args\n  const renderedDynamicArgs = dynamicArgs\n    .map(fn => fn())\n    // compact\n    .filter(item => item.length > 0);\n  const procArgs = []\n    .concat(staticArgs)\n    .concat(renderedDynamicArgs)\n    .concat(args);\n  return spawn(cmd, procArgs, opts);\n}\n\nmodule.exports = { staticArgs, dynamicArgs, createProcess };\n"],"file":"index.js"}