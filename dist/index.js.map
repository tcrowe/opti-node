{"version":3,"sources":["../src/index.js"],"names":["require","spawn","process","env","NODE_ENV","OPTI_NODE_LIMIT_RAM_MB","nodeCmd","staticArgs","buildLogColor","buildOptiNodeLimitRamMb","undefined","dynamicArgs","createProcess","args","opts","renderedDynamicArgs","map","fn","filter","item","length","procArgs","concat","module","exports"],"mappings":"0BAAgBA,OAAO,CAAC,eAAD,C,CAAhBC,K,UAAAA,K,kBACmDC,OAAO,CAACC,G,oCAA3DC,Q,CAAAA,Q,gCAAW,Y,uBAAcC,sB,cAAAA,sB,CAChC,GAAMC,CAAAA,OAAO,CAAG,MAAhB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CAKjB,qBALiB,CAYjB,aAZiB,CAkBjB,aAlBiB,CAwBjB,qBAxBiB,CA8BjB,kBA9BiB,CAoCjB,kBApCiB,CA0CjB,cA1CiB,CAgDjB,+BAhDiB,CAwDjB,4CAxDiB,CA8DjB,yBA9DiB,CAoEjB,sCApEiB,CAyEjB,kBAzEiB,CA8EjB,eA9EiB,CAAnB,CAiFA,QAASC,CAAAA,aAAT,EAAyB,CAKvB,GAAIJ,QAAQ,GAAK,aAAjB,CAAgC,CAC9B,MAAO,cACR,CAED,MAAO,iBACR,CAED,QAASK,CAAAA,uBAAT,EAAmC,CAKjC,GAAIJ,sBAAsB,GAAKK,SAA/B,CAA0C,CACxC,qCAA+BL,sBAA/B,CACD,CAED,MAAO,EACR,CAED,GAAMM,CAAAA,WAAW,CAAG,CAACH,aAAD,CAAgBC,uBAAhB,CAApB,CAYA,QAASG,CAAAA,aAAT,MAA+C,oBAAvBC,IAAuB,CAAvBA,IAAuB,oBAAhB,EAAgB,0BAAZC,IAAY,CAAZA,IAAY,oBAAL,EAAK,WAE7C,GAAMC,CAAAA,mBAAmB,CAAGJ,WAAW,CACpCK,GADyB,CACrB,SAAAC,EAAE,QAAIA,CAAAA,EAAE,EAAN,CADmB,EAGzBC,MAHyB,CAGlB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,MAAL,CAAc,CAAlB,CAHc,CAA5B,CAIA,GAAMC,CAAAA,QAAQ,CAAG,GACdC,MADc,CACPf,UADO,EAEde,MAFc,CAEPP,mBAFO,EAGdO,MAHc,CAGPT,IAHO,CAAjB,CAIA,MAAOZ,CAAAA,KAAK,CAACK,OAAD,CAAUe,QAAV,CAAoBP,IAApB,CACb,CAEDS,MAAM,CAACC,OAAP,CAAiB,CAACjB,UAAU,CAAVA,UAAD,CAAaI,WAAW,CAAXA,WAAb,CAA0BC,aAAa,CAAbA,aAA1B,CAAjB","sourcesContent":["const {spawn} = require(\"child_process\")\nconst {NODE_ENV = \"production\", OPTI_NODE_LIMIT_RAM_MB} = process.env\nconst nodeCmd = \"node\"\n\nconst staticArgs = [\n  /*\n    Enables optimizations which favor memory size over execution speed\n    type: bool  default: false\n    */\n  \"--optimize_for_size\",\n\n  /*\n    expose gc extension\n    globa.gc()\n    type: bool  default: false\n    */\n  \"--expose_gc\",\n\n  /*\n    always perform global GCs\n    type: bool  default: false\n    */\n  \"--gc_global\",\n\n  /*\n    garbage collect after <n> allocations\n    type: int  default: -1\n    */\n  \"--gc_interval=12000\",\n\n  /*\n    Perform compaction on every full GC\n    type: bool  default: false\n    */\n  \"--always_compact\",\n\n  /*\n    use memory reducer\n    type: bool  default: true\n    */\n  \"--memory_reducer\",\n\n  /*\n    abort by crashing\n    type: bool  default: true\n    */\n  \"--hard_abort\",\n\n  /*\n    abort program (dump core) when an uncaught exception is thrown\n    type: bool  default: false\n    */\n  \"--abort_on_uncaught_exception\",\n\n  /*\n    Abort program when the stack overflows or a string exceeds maximum length\n    (as opposed to throwing RangeError). This is useful for fuzzing where the\n    spec behaviour would introduce nondeterminism.)\n    type: bool  default: false\n    */\n  \"--abort_on_stack_or_string_length_overflow\",\n\n  /*\n    Use idle notification to reduce memory footprint.\n    type: bool  default: true\n    */\n  \"--use_idle_notification\",\n\n  /*\n    maximum length of function source code printed in a stack trace.)\n    type: int  default: 300\n    */\n  \"--max_stack_trace_source_length=1000\",\n\n  /*\n  silence deprecation warnings\n  */\n  \"--no-deprecation\",\n\n  /*\n  silence all process warnings\n  */\n  \"--no-warnings\"\n]\n\nfunction buildLogColor() {\n  /*\n  When logging, try to use coloured output.\n  type: bool  default: true\n  */\n  if (NODE_ENV === \"development\") {\n    return \"--log_colour\"\n  }\n\n  return \"--no-log_colour\"\n}\n\nfunction buildOptiNodeLimitRamMb() {\n  /*\n    max size of the old space (in Mbytes)\n    type: int  default: 0\n   */\n  if (OPTI_NODE_LIMIT_RAM_MB !== undefined) {\n    return `--max_old_space_size=${OPTI_NODE_LIMIT_RAM_MB}`\n  }\n\n  return \"\"\n}\n\nconst dynamicArgs = [buildLogColor, buildOptiNodeLimitRamMb]\n\n/**\n * Use `child_process.spawn` to create a new node process with opti-node args\n *\n * See https://nodejs.org/dist/latest/docs/api/child_process.html#child_process_child_process_spawn_command_args_options\n *\n * @method createProcess\n * @param {array} options.args maybe just your `[\"script.js\"]`\n * @param {object} options.opts\n * @returns {object} node child process\n */\nfunction createProcess({args = [], opts = {}}) {\n  // render the dynamic args\n  const renderedDynamicArgs = dynamicArgs\n    .map(fn => fn())\n    // compact\n    .filter(item => item.length > 0)\n  const procArgs = []\n    .concat(staticArgs)\n    .concat(renderedDynamicArgs)\n    .concat(args)\n  return spawn(nodeCmd, procArgs, opts)\n}\n\nmodule.exports = {staticArgs, dynamicArgs, createProcess}\n"],"file":"index.js"}