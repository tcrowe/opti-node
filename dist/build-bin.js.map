{"version":3,"sources":["../src/build-bin.js"],"names":["fs","require","path","async","optiNodeBinPath","join","__dirname","staticArgs","lineBreakPattern","buildSource","otherArgs","op","writeOptiNodeScript","done","writeFile","err","undefined","console","error","chmodOptiNodeScript","chmod","res","steps","series"],"mappings":"aAMA,GAAMA,CAAAA,EAAE,CAAGC,OAAO,CAAC,IAAD,CAAlB,CACA,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAAC,MAAD,CAApB,CACA,GAAME,CAAAA,KAAK,CAAGF,OAAO,CAAC,OAAD,CAArB,CACA,GAAMG,CAAAA,eAAe,CAAGF,IAAI,CAACG,IAAL,CAAUC,SAAV,CAAqB,IAArB,CAA2B,KAA3B,CAAkC,cAAlC,CAAxB,C,aACqBL,OAAO,CAAC,SAAD,C,CAArBM,U,UAAAA,U,CACP,GAAMC,CAAAA,gBAAgB,CAAG,KAAzB,CAEA,QAASC,CAAAA,WAAT,EAAuB,CAErB,GAAMC,CAAAA,SAAS,CAAGH,UAAU,CAACF,IAAX,CAAgB,GAAhB,CAAlB,CAEA,GAAMM,CAAAA,EAAE,mgBA0BHD,SA1BG,8EAAR,CAkCA,MAAOC,CAAAA,EACR,CAMD,QAASC,CAAAA,mBAAT,CAA6BC,IAA7B,CAAmC,CACjC,GAAMF,CAAAA,EAAE,CAAGF,WAAW,EAAtB,CAEAT,EAAE,CAACc,SAAH,CAAaV,eAAb,CAA8BO,EAA9B,CAAkC,SAAAI,GAAG,CAAI,CACvC,GAAIA,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,eAAd,CAA+Bd,eAA/B,CAAgDW,GAAhD,EACA,MAAOF,CAAAA,IAAI,CAACE,GAAD,CACZ,CAEDF,IAAI,EACL,CAPD,CAQD,CAED,QAASM,CAAAA,mBAAT,CAA6BN,IAA7B,CAAmC,CACjCb,EAAE,CAACoB,KAAH,CAAShB,eAAT,CAA0B,GAA1B,CAAiC,SAACW,GAAD,CAAMM,GAAN,CAAc,CAC7C,GAAIN,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,cAAd,CAA8Bd,eAA9B,CAA+CW,GAA/C,EACA,MAAOF,CAAAA,IAAI,CAACE,GAAD,CACZ,CAEDF,IAAI,EACL,CAPD,CAQD,CAED,GAAMS,CAAAA,KAAK,CAAG,CAACV,mBAAD,CAAsBO,mBAAtB,CAAd,CAEAhB,KAAK,CAACoB,MAAN,CAAaD,KAAb,CAAoB,SAACP,GAAD,CAAMM,GAAN,CAAc,CAChC,GAAIN,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,0BAAd,CAA0CH,GAA1C,CACD,CACF,CAJD","sourcesContent":["/*\n\ntool to build opti-node shell script for ../bin\n\n*/\n\nconst fs = require(\"fs\")\nconst path = require(\"path\")\nconst async = require(\"async\")\nconst optiNodeBinPath = path.join(__dirname, \"..\", \"bin\", \"opti-node.sh\")\nconst {staticArgs} = require(\"./index\")\nconst lineBreakPattern = /\\n/g\n\nfunction buildSource() {\n  // static opti-node args\n  const otherArgs = staticArgs.join(\" \")\n\n  const op = `\n\n# opti-node bin file generated by ../src/build-bin.js\n\n#\n# try to run node with good settings for low resource environments\n#\n\nLOG_COLOR_ARG=\"--no-log-colour\"\n\nif [[ \"$NODE_ENV\" == \"development\" ]]; then\n  LOG_COLOR_ARG=\"--log-colour\"\nfi\n\nLIMIT_RAM_ARG=\"\"\n\nif [[ \"$OPTI_NODE_LIMIT_RAM_MB\" != \"\" ]]; then\n  LIMIT_RAM_ARG=\"--max_old_space_size=$OPTI_NODE_LIMIT_RAM_MB\"\nfi\n\nINTERACTIVE=\"\"\n\nif [[ \"$@\" == \"\" ]]; then\n  INTERACTIVE=\"--interactive\"\nfi\n\nnode ${otherArgs} \\\\\n  $LOG_COLOR_ARG \\\\\n  $LIMIT_RAM_ARG \\\\\n  $INTERACTIVE \\\\\n  $@\n\n`\n\n  return op\n}\n\n//\n// write the shell script to the ../bin path\n//\n\nfunction writeOptiNodeScript(done) {\n  const op = buildSource()\n\n  fs.writeFile(optiNodeBinPath, op, err => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error writing\", optiNodeBinPath, err)\n      return done(err)\n    }\n\n    done()\n  })\n}\n\nfunction chmodOptiNodeScript(done) {\n  fs.chmod(optiNodeBinPath, 0o777, (err, res) => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error chomod\", optiNodeBinPath, err)\n      return done(err)\n    }\n\n    done()\n  })\n}\n\nconst steps = [writeOptiNodeScript, chmodOptiNodeScript]\n\nasync.series(steps, (err, res) => {\n  if (err !== null && err !== undefined) {\n    console.error(\"error doing build series\", err)\n  }\n})\n"],"file":"build-bin.js"}