{"version":3,"sources":["../src/build-bin.js"],"names":["fs","require","path","async","optiNodeBinPath","join","__dirname","staticArgs","buildSource","otherArgs","op","writeOptiNodeScript","done","writeFile","err","undefined","console","error","chmodOptiNodeScript","chmod","steps","series"],"mappings":";;AAUA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,eAAe,GAAGF,IAAI,CAACG,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,cAAlC,CAAxB;;eACuBL,OAAO,CAAC,GAAD,C;IAAtBM,U,YAAAA,U;;AAER,SAASC,WAAT,GAAuB;AAErB,MAAMC,SAAS,GAAGF,UAAU,CAACF,IAAX,CAAgB,GAAhB,CAAlB;AAEA,MAAMK,EAAE,80BAsCHD,SAtCG,+EAAR;AA8CA,SAAOC,EAAP;AACD;;AAMD,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,MAAMF,EAAE,GAAGF,WAAW,EAAtB;AAEAR,EAAAA,EAAE,CAACa,SAAH,CAAaT,eAAb,EAA8BM,EAA9B,EAAkC,UAAAI,GAAG,EAAI;AACvC,QAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC;AACrCC,MAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+Bb,eAA/B,EAAgDU,GAAhD;AACA,aAAOF,IAAI,CAACE,GAAD,CAAX;AACD;;AAEDF,IAAAA,IAAI;AACL,GAPD;AAQD;;AAED,SAASM,mBAAT,CAA6BN,IAA7B,EAAmC;AACjCZ,EAAAA,EAAE,CAACmB,KAAH,CAASf,eAAT,EAA0B,GAA1B,EAAiC,UAAAU,GAAG,EAAI;AACtC,QAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC;AACrCC,MAAAA,OAAO,CAACC,KAAR,CAAc,aAAd,EAA6Bb,eAA7B,EAA8CU,GAA9C;AACA,aAAOF,IAAI,CAACE,GAAD,CAAX;AACD;;AAEDF,IAAAA,IAAI;AACL,GAPD;AAQD;;AAED,IAAMQ,KAAK,GAAG,CAACT,mBAAD,EAAsBO,mBAAtB,CAAd;AAEAf,KAAK,CAACkB,MAAN,CAAaD,KAAb,EAAoB,UAAAN,GAAG,EAAI;AACzB,MAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC;AACrCC,IAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CH,GAA1C;AACD;AACF,CAJD","sourcesContent":["/*\n\n# opti-node\n\n+ build opti-node shell script in ../bin\n\nSee ../COPYING for GPL 3.0 license\n\n*/\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst async = require(\"async\");\nconst optiNodeBinPath = path.join(__dirname, \"..\", \"bin\", \"opti-node.sh\");\nconst { staticArgs } = require(\".\");\n\nfunction buildSource() {\n  // static opti-node args\n  const otherArgs = staticArgs.join(\" \");\n\n  const op = `#!/bin/bash\n\n# opti-node bin file generated by ../src/build-bin.js\n\n#\n# try to run node with good settings for low resource environments\n#\n\n# no color in production\nLOG_COLOR_ARG=\"--no-log-colour\"\n\n# assume production if no NODE_ENV\nif [ \"$NODE_ENV\" == \"\" ]; then\n  NODE_ENV=production\nfi\n\n# enable color in development\nif [ \"$NODE_ENV\" == \"development\" ]; then\n  LOG_COLOR_ARG=\"--log-colour\"\nfi\n\n# the user can choose to limit ram by passing OPTI_NODE_LIMIT_RAM_MB=256\nLIMIT_RAM_ARG=\"\"\n\nif [ \"$OPTI_NODE_LIMIT_RAM_MB\" != \"\" ]; then\n  LIMIT_RAM_ARG=\"--max_old_space_size=$OPTI_NODE_LIMIT_RAM_MB\"\nfi\n\n# no args = interactive / REPL\nINTERACTIVE=\"\"\n\n# COUNT == 1 means no arguments\nCOUNT=\\`echo \"$@\" | wc -c\\`\n\nif [ COUNT == 1 ]; then\n  INTERACTIVE=\"--interactive\"\nfi\n\nnode ${otherArgs} \\\\\n  $LOG_COLOR_ARG \\\\\n  $LIMIT_RAM_ARG \\\\\n  $INTERACTIVE \\\\\n  $@\n\n`;\n\n  return op;\n}\n\n//\n// write the shell script to the ../bin path\n//\n\nfunction writeOptiNodeScript(done) {\n  const op = buildSource();\n\n  fs.writeFile(optiNodeBinPath, op, err => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error writing\", optiNodeBinPath, err);\n      return done(err);\n    }\n\n    done();\n  });\n}\n\nfunction chmodOptiNodeScript(done) {\n  fs.chmod(optiNodeBinPath, 0o777, err => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error chmod\", optiNodeBinPath, err);\n      return done(err);\n    }\n\n    done();\n  });\n}\n\nconst steps = [writeOptiNodeScript, chmodOptiNodeScript];\n\nasync.series(steps, err => {\n  if (err !== null && err !== undefined) {\n    console.error(\"error doing build series\", err);\n  }\n});\n"],"file":"build-bin.js"}