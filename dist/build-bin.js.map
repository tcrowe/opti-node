{"version":3,"sources":["../src/build-bin.js"],"names":["fs","require","path","async","optiNodeBinPath","join","__dirname","staticArgs","buildSource","otherArgs","op","writeOptiNodeScript","done","writeFile","err","undefined","console","error","chmodOptiNodeScript","chmod","steps","series"],"mappings":"aAMA,GAAMA,CAAAA,EAAE,CAAGC,OAAO,CAAC,IAAD,CAAlB,CACA,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAAC,MAAD,CAApB,CACA,GAAME,CAAAA,KAAK,CAAGF,OAAO,CAAC,OAAD,CAArB,CACA,GAAMG,CAAAA,eAAe,CAAGF,IAAI,CAACG,IAAL,CAAUC,SAAV,CAAqB,IAArB,CAA2B,KAA3B,CAAkC,cAAlC,CAAxB,C,aACuBL,OAAO,CAAC,GAAD,C,CAAtBM,U,UAAAA,U,CAER,QAASC,CAAAA,WAAT,EAAuB,CAErB,GAAMC,CAAAA,SAAS,CAAGF,UAAU,CAACF,IAAX,CAAgB,GAAhB,CAAlB,CAEA,GAAMK,CAAAA,EAAE,gxBAmCHD,SAnCG,8EAAR,CA2CA,MAAOC,CAAAA,EACR,CAMD,QAASC,CAAAA,mBAAT,CAA6BC,IAA7B,CAAmC,CACjC,GAAMF,CAAAA,EAAE,CAAGF,WAAW,EAAtB,CAEAR,EAAE,CAACa,SAAH,CAAaT,eAAb,CAA8BM,EAA9B,CAAkC,SAAAI,GAAG,CAAI,CACvC,GAAIA,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,eAAd,CAA+Bb,eAA/B,CAAgDU,GAAhD,EACA,MAAOF,CAAAA,IAAI,CAACE,GAAD,CACZ,CAEDF,IAAI,EACL,CAPD,CAQD,CAED,QAASM,CAAAA,mBAAT,CAA6BN,IAA7B,CAAmC,CACjCZ,EAAE,CAACmB,KAAH,CAASf,eAAT,CAA0B,GAA1B,CAAiC,SAAAU,GAAG,CAAI,CACtC,GAAIA,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,aAAd,CAA6Bb,eAA7B,CAA8CU,GAA9C,EACA,MAAOF,CAAAA,IAAI,CAACE,GAAD,CACZ,CAEDF,IAAI,EACL,CAPD,CAQD,CAED,GAAMQ,CAAAA,KAAK,CAAG,CAACT,mBAAD,CAAsBO,mBAAtB,CAAd,CAEAf,KAAK,CAACkB,MAAN,CAAaD,KAAb,CAAoB,SAAAN,GAAG,CAAI,CACzB,GAAIA,GAAG,GAAK,IAAR,EAAgBA,GAAG,GAAKC,SAA5B,CAAuC,CACrCC,OAAO,CAACC,KAAR,CAAc,0BAAd,CAA0CH,GAA1C,CACD,CACF,CAJD","sourcesContent":["/*\n\ntool to build opti-node shell script for ../bin\n\n*/\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst async = require(\"async\");\nconst optiNodeBinPath = path.join(__dirname, \"..\", \"bin\", \"opti-node.sh\");\nconst { staticArgs } = require(\".\");\n\nfunction buildSource() {\n  // static opti-node args\n  const otherArgs = staticArgs.join(\" \");\n\n  const op = `#!/bin/bash\n\n# opti-node bin file generated by ../src/build-bin.js\n\n#\n# try to run node with good settings for low resource environments\n#\n\n# no color in production\nLOG_COLOR_ARG=\"--no-log-colour\"\n\n# assume production if no NODE_ENV\nif [ \"$NODE_ENV\" == \"\" ]; then\n  NODE_ENV=production\nfi\n\n# enable color in development\nif [ \"$NODE_ENV\" == \"development\" ]; then\n  LOG_COLOR_ARG=\"--log-colour\"\nfi\n\n# the user can choose to limit ram by passing OPTI_NODE_LIMIT_RAM_MB=256\nLIMIT_RAM_ARG=\"\"\n\nif [ \"$OPTI_NODE_LIMIT_RAM_MB\" != \"\" ]; then\n  LIMIT_RAM_ARG=\"--max_old_space_size=$OPTI_NODE_LIMIT_RAM_MB\"\nfi\n\n# no args = interactive / REPL\nINTERACTIVE=\"\"\n\nif [ \"$@\" == \"\" ]; then\n  INTERACTIVE=\"--interactive\"\nfi\n\nnode ${otherArgs} \\\\\n  $LOG_COLOR_ARG \\\\\n  $LIMIT_RAM_ARG \\\\\n  $INTERACTIVE \\\\\n  $@\n\n`;\n\n  return op;\n}\n\n//\n// write the shell script to the ../bin path\n//\n\nfunction writeOptiNodeScript(done) {\n  const op = buildSource();\n\n  fs.writeFile(optiNodeBinPath, op, err => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error writing\", optiNodeBinPath, err);\n      return done(err);\n    }\n\n    done();\n  });\n}\n\nfunction chmodOptiNodeScript(done) {\n  fs.chmod(optiNodeBinPath, 0o777, err => {\n    if (err !== null && err !== undefined) {\n      console.error(\"error chmod\", optiNodeBinPath, err);\n      return done(err);\n    }\n\n    done();\n  });\n}\n\nconst steps = [writeOptiNodeScript, chmodOptiNodeScript];\n\nasync.series(steps, err => {\n  if (err !== null && err !== undefined) {\n    console.error(\"error doing build series\", err);\n  }\n});\n"],"file":"build-bin.js"}